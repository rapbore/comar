<?php

/**
 * This is the model base class for the table "user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "user" available as properties of the model,
 * followed by relations of table "user" available as properties of the model.
 *
 * @property integer $id
 * @property string $nombre
 * @property string $fono
 * @property string $mail
 *
 * @property Local[] $locals
 * @property UserPlan[] $userPlans
 */
abstract class BaseUser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'nombre';
	}

	public function rules() {
		return array(
			array('nombre, fono, mail', 'length', 'max'=>45),
			array('nombre, fono, mail', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, nombre, fono, mail', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'locals' => array(self::HAS_MANY, 'Local', 'user_id'),
			'userPlans' => array(self::HAS_MANY, 'UserPlan', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'nombre' => Yii::t('app', 'Nombre'),
			'fono' => Yii::t('app', 'Fono'),
			'mail' => Yii::t('app', 'Mail'),
			'locals' => null,
			'userPlans' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('nombre', $this->nombre, true);
		$criteria->compare('fono', $this->fono, true);
		$criteria->compare('mail', $this->mail, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	
	public function hashPassword($password,$salt)
	{
		return md5($salt.$password);
	}
	
	public function generateSalt()
	{
		return uniqid('',true);
	}
	public function validatePassword($password)
	{
		return $this->hashPassword($password,'28b206548469ce62182048fd9cf91760')===$this->password;
	}
}